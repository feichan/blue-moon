// Generated by CoffeeScript 1.4.0

var fs = require('fs');
var formidable = require('formidable');
var rimgLib = require('../rimg');

exports.index = function(request, response) {
	response.writeHead(200, {'Content-Type': "application/json"});
	response.write(JSON.stringify({"message":"this is blue moon application!"}));
	response.end();
}

exports.image = function(request, response) {
	var image_id = request.params[0];
	var size = request.params[1];
	var type = request.params[2];

	var size_arr = [960,640,768,320];
	var size_flag = true;
	for(var i =0; i < size_arr.length; i++){
		if(parseInt(size) == size_arr[i]){
			size_flag = false;
		}
	}

	if(size_flag){
		response.writeHead(301,{Location: '/404_error'});
		response.end();
		return;
	}

	var options = {
	  accessKeyId : 'accessKeyId',
	  accessKeySecret : 'accessKeySecret'
	}
	var rimg = new rimgLib.Rimg(options);
	var set_option = {
		bkt : "blue-moon",
		ca_bkt : "blue-moon-cache",
		obj : image_id+ "." + "jpg",
		ca_obj : image_id + "_" + size + "." + "jpg"
	};
	rimg.set(set_option, function(result){
		if(result){
			rimg.send(640, function(file, content_type){
				response.writeHead(200, {'Content-Type' : content_type});
				response.write(file, 'binary');
				response.end();
			})
		}else{
			response.writeHead(301,{Location: '/404_error'});
			response.end();
		}
	})
}

exports.upload = function(request, response){
	var ext, id, object, object_640, srcFile;
  var form = new formidable.IncomingForm();
  form.encoding = 'utf-8';
  form.uploadDir = "tmp/";
  
  request.form.on('file', function(name, file){
  	if(name == 'image' && file.name != ''){
  		ext = file.name.split(".").pop().toLowerCase();
  		id = file.path.split("/").pop();
  		object = id + "." + ext;
  		object_640 = id + "_640." + ext;
  		srcFile = form.uploadDir + object

  		// get the progress
			form.on('progress', function(bytesReceived, bytesExpected) {
			  console.log( bytesReceived + " ==> " +((bytesReceived / bytesExpected) * 100) + "% uploaded");
			});

			// parse request data use incomingform
			form.parse(request);
			// handle image by yourself
			form.onPart = function(part){
				if(part.name != "image" || !part.filename){
					form.handlePart(part);
					response.writeHead(404);
					response.end();
				}else{
					// save file as stream
					var file_stream = fs.createWriteStream(srcFile)
					part.addListener('data', function(buffer){
						file_stream.write(buffer, function(err, written){});
					})
					// file recieved and upload to aliyun
					part.addListener('end', function(){
						var options = {
						  accessKeyId : 'accessKeyId',
						  accessKeySecret : 'accessKeySecret'
						}
						var rimg = new rimgLib.Rimg(options);
						var option = {
							bucket: "blue-moon",
							object: object,
							srcFile: srcFile
						};
						rimg.save(option, function(error){
							if(!error){
								response.writeHead(301,{Location: '/image/' + object_640});
								response.end();
							}
						});
					})
				}
			}
  	}else{
			response.writeHead(301,{Location: '/404_error'});
			response.end();
  	}
  });
}

exports.errors = function(request, response){
	fs.readFile('public/images/error/not_found.png', 'binary', function(error, file){
	  response.writeHead(200, {'Content-Type': 'image/png'});
	  response.write(file, 'binary');
	  response.end();
	})
}

exports.form = function(request, response){
  var form = '<form method="post" action="/upload" enctype="multipart/form-data">';
  form += '<p>Image: <input type="file" name="image" /></p>';
  form += '<p><input type="submit" value="Upload" /></p>';
  form += '</form>';
  response.writeHead(200, {'Content-Type': 'text/html'});
  response.write(form);
  response.end();
}
